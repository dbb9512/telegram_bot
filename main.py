#!/usr/bin/python
# -*- coding: utf8 -*-
import logging
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    Application,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)
from dotenv import load_dotenv
import openai
import os
import random

# Enable logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)
# f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {username}! –ï—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –º—ã —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –Ω–∏—Ö.", f'–ü—Ä–∏–≤–µ—Ç, {username}! –û—á–µ–Ω—å —Ä–∞–¥, —á—Ç–æ –≤—ã –∑–∞–≥–ª—è–Ω—É–ª–∏. –•–æ—Ç–∏—Ç–µ –æ —á–µ–º-—Ç–æ —É–∑–Ω–∞—Ç—å?', '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –¥–∞–≤–∞–π—Ç–µ –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è', '–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ú—ã –æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –≤–∏–¥—ã —Ä–∏—ç–ª—Ç–æ—Ä—Å–∫–∏—Ö –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —É—Å–ª—É–≥. –ü—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –≤ –Ω–∞—à—É –∫–æ–º–ø–∞–Ω–∏—é –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –≤–æ–∑–Ω–∏–∫—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É, –∏ –º—ã –Ω–µ –æ—Ç–∫–∞–∂–µ–º –≤–∞–º –≤ –µ–≥–æ —Ä–µ—à–µ–Ω–∏–∏!', "–î–æ–±—Ä—ã–π –¥–µ–Ω—å. –†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å!", f'{username},–¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!'


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. `/start`."""
    chat_id = update.effective_chat.id
    username = update.effective_user.username
    text_hello_msg = [
        "–î–æ–±—Ä—ã–π –¥–µ–Ω—å!üëãüèª\n–Ø ‚Äî –±–æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ ¬´–ö–æ–ª–∏–∑–µ–π¬ª. –£ –º–µ–Ω—è –ø–æ–¥ –∫–∞–ø–æ—Ç–æ–º –Ω–µ–π—Ä–æ—Å–µ—Ç—å, –ø–æ—ç—Ç–æ–º—É –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–æ–ø—Ä–æ—Å –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ, –∞ —è –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—á—É.\n\n"
        "–°–µ–π—á–∞—Å —è –º–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∞–¥—Ä–µ—Å, —Å–≤—è–∑—å, —É—Å–ª—É–≥–∏, –æ–ø–ª–∞—Ç–∞, —Å—Ç–æ–∏–º–æ—Å—Ç—å.\n\n"
        "–ê –µ—Å–ª–∏ —è –Ω–µ –±—É–¥—É —É–≤–µ—Ä–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ ‚Äî –ø—Ä–∏–≥–ª–∞—à—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.üòä"
    ]
    rand = random.choice(text_hello_msg)

    logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –Ω–∞—á–∞–ª –±–µ—Å–µ–¥—É.", "@" + str(chat_id))

    await context.bot.send_message(chat_id=update.effective_chat.id, text=rand)
    return START_ROUTES


data_send = {
    "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è": [
        "–ú—ã ‚Äî –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ ¬´–ö–æ–ª–∏–∑–µ–π¬ª, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω–æ–µ –≤ –ú–æ—Å–∫–≤–µ, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ —Ä–∏–µ–ª—Ç–æ—Ä—Å–∫–∏–µ, –±—Ä–æ–∫–µ—Ä—Å–∫–∏–µ –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏ —Å 2000 –≥–æ–¥–∞.\n\n"
        "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –ö–æ–ª–∏–∑–µ–π –ø–æ–∑–≤–æ–ª—è–µ—Ç —É–¥–æ–±–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—ã, —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —á–µ—Ä–µ–∑ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –∏–ø–æ—Ç–µ–∫—É –æ–Ω–ª–∞–π–Ω.\n\n"
        "–í–∞–∂–Ω–æ–µ –æ—Ç–ª–∏—á–∏–µ ¬´–ö–æ–ª–∏–∑–µ–π¬ª –æ—Ç –¥—Ä—É–≥–∏—Ö —Ä–∏–µ–ª—Ç–æ—Ä—Å–∫–∏—Ö –∫–æ–º–ø–∞–Ω–∏–π ‚Äî –≥–∞—Ä–∞–Ω—Ç–∏–π–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç. –í —Å–ª—É—á–∞–µ –ø—Ä–æ–±–ª–µ–º –º—ã –∫–æ–º–ø–µ–Ω—Å–∏—Ä—É–µ–º –≤–∞—à–∏ –ø–æ—Ç–µ—Ä–∏ –ø–æ —Å–¥–µ–ª–∫–µ –∏–∑ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Ñ–æ–Ω–¥–∞. –¢–∞–∫–∂–µ –º–∞–ª–æ –∫–∞–∫–æ–µ –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ –ø–æ –ø—Ä–æ–¥–∞–∂–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –º–æ–∂–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –∏–ø–æ—Ç–µ–∫—É, –∞ —Ç–∞–∫–∂–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∫–∏–¥–∫–∏ –∏ –±–æ–Ω—É—Å—ã. –° –Ω–∞–º–∏ —à–∞–Ω—Å –Ω–∞ –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∏–ø–æ—Ç–µ–∫–∏ –Ω–∞ 25% –≤—ã—à–µ!"
    ],
    "–∞–¥—Ä–µ—Å": [
        "–ú—ã —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω—ã –ø–æ –∞–¥—Ä–µ—Å—É:\n"
        "üìç –ú–æ—Å–∫–≤–∞, –ú–æ—Å–∫–æ–≤—Å–∫–∏–π –ø—Ä-—Ç, 40, –æ—Ñ. 510\n"
        "üïô–û—Ñ–∏—Å –æ—Ç–∫—Ä—ã—Ç –ø–Ω-–ø—Ç —Å 09:00 –¥–æ 18:00, —Å–± —Å 10:00 –¥–æ 17:00"
    ],
    "—Å–≤—è–∑—å": [
        "–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –æ–¥–Ω–∏–º –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Å–ø–æ—Å–æ–±–æ–≤:\n"
        "–ñ–∏–ª–æ–π –æ—Ç–¥–µ–ª\n"
        "üìû+7 495 111-111\n"
        "–ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π –æ—Ç–¥–µ–ª\n"
        "üìû+7 495 111-111\n"
        "‚úâÔ∏èmail@kolizey.ru"
    ],
    "—É—Å–ª—É–≥–∏": [
        "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —à–∏—Ä–æ–∫–∏–π —Å–ø–µ–∫—Ç—Ä —É—Å–ª—É–≥ –¥–ª—è –Ω–∞—à–∏—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤:\n"
        "- –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ,\n"
        "- –í—ã–ø–∏—Å–∫–∞ –∏–∑ –ï–ì–†–ü,\n"
        "- –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞,\n"
        "(–°—é–¥–∞ –º–æ–∂–µ—Ç–µ –≤—ã–≤–æ–¥–∏—Ç—å –ª—é–±—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö)\n\n"
        "–° —É—Å–ª–æ–≤–∏—è–º–∏ –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –≤ –ø—Ä–∞–π—Å –ª–∏—Å—Ç–µ.",
        "–°–±–æ—Ä, –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ, —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –≤–∏–¥–æ–≤ —Å–¥–µ–ª–æ–∫ –∏ –ª—é–±—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é:"
        "- –Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ,\n"
        "- –í—ã–ø–∏—Å–∫–∞ –∏–∑ –ï–ì–†–ü,\n"
        "- –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞,\n"
        "(–°—é–¥–∞ –º–æ–∂–µ—Ç–µ –≤—ã–≤–æ–¥–∏—Ç—å –ª—é–±—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö)\n\n"
        "–° —É—Å–ª–æ–≤–∏—è–º–∏ –æ–∫–∞–∑–∞–Ω–∏—è —É—Å–ª—É–≥ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –≤ –ø—Ä–∞–π—Å –ª–∏—Å—Ç–µ.",
    ],
    "–æ–ø–ª–∞—Ç–∞": [
        "–î–ª—è –æ–ø–ª–∞—Ç—ã —É—Å–ª—É–≥, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Ñ–æ—Ä–º–æ–π –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ."
    ],
    "–æ–ø–µ—Ä–∞—Ç–æ—Ä": [
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, —è –ø–µ—Ä–µ–≤–µ–¥—É –≤–∞—à –≤–æ–ø—Ä–æ—Å –Ω–∞ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞.",
        "–°–µ–π—á–∞—Å –ø–æ–∑–æ–≤—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
    ],
    "–ø—Ä–æ—â–∞–π": [
        "–•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è!",
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—É—é –±–µ—Å–µ–¥—É. –î–æ –≤—Å—Ç—Ä–µ—á–∏!",
        "–î–æ –≤—Å—Ç—Ä–µ—á–∏!",
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ. –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!",
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ. –î–æ –≤—Å—Ç—Ä–µ—á–∏!",
        "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!",
        "–í—Å–µ–≥–æ –¥–æ–±—Ä–æ–≥–æ!",
    ],
    "–ª–∏—á–Ω–æ—Å—Ç—å": [
        "–Ø –±–æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–≥–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —É—Å–ª—É–≥–∞–º–∏ –Ω–∞—à–µ–≥–æ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞. "
    ],
    "—Å—Ç–æ–∏–º–æ—Å—Ç—å": [
        "        –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ ¬´–ö–æ–ª–∏–∑–µ–π¬ª.\n‚Äî *–ü–æ–∫—É–ø–∫–∞ –æ–±—ä–µ–∫—Ç–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏*, 1% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–±—ä–µ–∫—Ç–∞ +39 000 ‚ÇΩ.\n‚Äî *–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è —É—Å–ª—É–≥–∞ —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π*, 2% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–±—ä–µ–∫—Ç–∞ +39 000 ‚ÇΩ.\n‚Äî *–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞*, 0%.\n‚Äî *–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç –∑–∞—Å—Ç—Ä–æ–π—â–∏–∫–∞ —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π*, 5% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –æ–±—ä–µ–∫—Ç–∞.\n‚Äî *–Æ—Ä–∏–¥–∏—á–µ—Å–∫–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ —Å–¥–µ–ª–∫–∏*, 39 000 ‚ÇΩ."
    ],
    "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ": [
        "–ö–∞–∂–µ—Ç—Å—è –Ω–∞–º –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–º–æ—â—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞. –ó–æ–≤—É?",
        "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –≤–∞—Å –Ω–µ–¥–æ–ø–æ–Ω–∏–º–∞—é. –ü–æ–∑–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞?",
        "–ü–æ–∫–∞ –∑–∞—Ç—Ä—É–¥–Ω—è—é—Å—å –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç—å. –ß—Ç–æ –∂, –ø–æ–∑–≤–∞—Ç—å —á–µ–ª–æ–≤–µ–∫–∞?",
        "–•–º, –Ω–∞–º –Ω–µ–ø—Ä–µ–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, –ø–æ–∑–æ–≤–µ–º?",
        "–ü–æ—Ö–æ–∂–µ, —á—Ç–æ –±–µ–∑ –ø–æ–º–æ—â–∏ –Ω–∞—à–µ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –º—ã –Ω–µ —Å–ø—Ä–∞–≤–∏–º—Å—è.",
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∂–µ —è –º–æ–≥—É –ø–æ–∑–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞",
        "–ù–µ —Ö–æ—á—É, —á—Ç–æ–±—ã –º–µ–∂–¥—É –Ω–∞–º–∏ –±—ã–ª–∏ –Ω–µ–¥–æ–ø–æ–Ω–∏–º–∞–Ω–∏—è. –ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∂–µ —è –º–æ–≥—É –ø–æ–∑–≤–∞—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.",
    ],
    "–¥–µ–ª–∞": ["–í—Å–µ —Ö–æ—Ä–æ—à–æ.", "–õ—É—á—à–µ –≤—Å–µ—Ö!"],
    "–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ": [
        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ï—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –º—ã —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –æ—Ç–≤–µ—Ç–∏–º –Ω–∞ –Ω–∏—Ö.",
        f"–ü—Ä–∏–≤–µ—Ç! –û—á–µ–Ω—å —Ä–∞–¥, —á—Ç–æ –≤—ã –∑–∞–≥–ª—è–Ω—É–ª–∏. –•–æ—Ç–∏—Ç–µ –æ —á–µ–º-—Ç–æ —É–∑–Ω–∞—Ç—å?",
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –¥–∞–≤–∞–π—Ç–µ –ø–æ–º–æ–≥—É –≤–∞–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è",
        "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ú—ã –æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –≤–∏–¥—ã —Ä–∏—ç–ª—Ç–æ—Ä—Å–∫–∏—Ö –∏ —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö —É—Å–ª—É–≥. –ü—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –≤ –Ω–∞—à—É –∫–æ–º–ø–∞–Ω–∏—é –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –≤–æ–∑–Ω–∏–∫—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É, –∏ –º—ã –Ω–µ –æ—Ç–∫–∞–∂–µ–º –≤–∞–º –≤ –µ–≥–æ —Ä–µ—à–µ–Ω–∏–∏!",
        "–î–æ–±—Ä—ã–π –¥–µ–Ω—å. –†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å!",
    ],
    "–≥—Ä–∞—Ñ–∏–∫": ["üïô–û—Ñ–∏—Å –æ—Ç–∫—Ä—ã—Ç –ø–Ω-–ø—Ç —Å 09:00 –¥–æ 18:00, —Å–± —Å 10:00 –¥–æ 17:00"],
}


async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text_user = update.message.text
    query = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –∫–æ—Ç–æ—Ä—ã–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∏—Ä—É–µ—Ç –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –∏–∑ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π. \n"
        "–Ø –∑–Ω–∞—é —Å–ª–µ–¥—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –ø—Ä–æ –∞–¥—Ä–µ—Å –æ—Ñ–∏—Å–∞ - –∞–¥—Ä–µ—Å, "
        "—Å–ø–æ—Å–æ–±–∞—Ö —Å–≤—è–∑–∏ —Å –Ω–∞–º–∏ - —Å–≤—è–∑—å, —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥ - —Å—Ç–æ–∏–º–æ—Å—Ç—å, –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —É—Å–ª—É–≥ - —É—Å–ª—É–≥–∏, "
        '–∫–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å —É—Å–ª—É–≥–∏ - –æ–ø–ª–∞—Ç–∞. ".\n\n'
        "–í–æ–ø—Ä–æ—Å: –ö—Ç–æ –≤—ã?   \n–û—Ç–≤–µ—Ç: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n"
        "–í–æ–ø—Ä–æ—Å: –ö–∞–∫ –¥–µ–ª–∞?   \n–û—Ç–≤–µ—Ç: –¥–µ–ª–∞\n\n"
        "–í–æ–ø—Ä–æ—Å: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è   \n–û—Ç–≤–µ—Ç: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n"
        "–í–æ–ø—Ä–æ—Å: —Ä–∞—Å—Å–∫–∞–∂–∏ –æ –ø—Ä–æ–¥—É–∫—Ç–µ   \n–û—Ç–≤–µ—Ç: —É—Å–ª—É–≥–∏\n\n"
        "–í–æ–ø—Ä–æ—Å: –ö—Ç–æ —Ç—ã?   \n–û—Ç–≤–µ—Ç: –ª–∏—á–Ω–æ—Å—Ç—å\n\n"
        "–í–æ–ø—Ä–æ—Å: –ß—Ç–æ —Ç—ã –¥–µ–ª–∞–µ—à—å?   \n–û—Ç–≤–µ—Ç: –ª–∏—á–Ω–æ—Å—Ç—å\n\n"
        "–í–æ–ø—Ä–æ—Å: –ß–µ–º –≤—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å?   \n–û—Ç–≤–µ—Ç: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n"
        "–í–æ–ø—Ä–æ—Å: –ó–∞—á–µ–º —Ç—ã?   \n–û—Ç–≤–µ—Ç: –ª–∏—á–Ω–æ—Å—Ç—å\n\n"
        "–í–æ–ø—Ä–æ—Å: —á–µ–º —Ç—ã –∑–Ω–∞–∏–º–∞–µ—à—å—Å—è?   \n–û—Ç–≤–µ—Ç: –ª–∏—á–Ω–æ—Å—Ç—å\n\n"
        "–í–æ–ø—Ä–æ—Å: –ö–∞–∫ –¥–æ –≤–∞—Å –¥–æ–±—Ä–∞—Ç—å—Å—è?   \n–û—Ç–≤–µ—Ç: –∞–¥—Ä–µ—Å\n\n"
        "–í–æ–ø—Ä–æ—Å: –∞–¥—Ä–µ—Å   \n–û—Ç–≤–µ—Ç: –∞–¥—Ä–µ—Å\n\n"
        "–í–æ–ø—Ä–æ—Å: –ì–¥–µ –≤—ã?   \n–û—Ç–≤–µ—Ç: –∞–¥—Ä–µ—Å\n\n"
        "–í–æ–ø—Ä–æ—Å: –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?  \n–û—Ç–≤–µ—Ç: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n\n"
        "–í–æ–ø—Ä–æ—Å: –ü–æ–∑–æ–≤–∏ —á–µ–ª–æ–≤–µ–∫–∞  \n–û—Ç–≤–µ—Ç: –æ–ø–µ—Ä–∞—Ç–æ—Ä\n\n"
        "–í–æ–ø—Ä–æ—Å: –û–ø–µ—Ä–∞—Ç–æ—Ä–∞ –ø–æ–∑–æ–≤–∏  \n–û—Ç–≤–µ—Ç: –æ–ø–µ—Ä–∞—Ç–æ—Ä\n\n"
        "–í–æ–ø—Ä–æ—Å: –ù—É–∂–µ–Ω —á–µ–ª–æ–≤–µ–∫  \n–û—Ç–≤–µ—Ç: –æ–ø–µ—Ä–∞—Ç–æ—Ä\n\n"
        "–í–æ–ø—Ä–æ—Å: –ù—É–∂–µ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä  \n–û—Ç–≤–µ—Ç: –æ–ø–µ—Ä–∞—Ç–æ—Ä\n\n"
        "–í–æ–ø—Ä–æ—Å: —á–µ–ª–æ–≤–µ–∫  \n–û—Ç–≤–µ—Ç: –æ–ø–µ—Ä–∞—Ç–æ—Ä\n\n"
        "–í–æ–ø—Ä–æ—Å: –æ–ø–µ—Ä–∞—Ç–æ—Ä  \n–û—Ç–≤–µ—Ç: –æ–ø–µ—Ä–∞—Ç–æ—Ä\n\n"
        "–í–æ–ø—Ä–æ—Å: –î–æ —Å–≤–∏–¥–∞–Ω–∏—è, –ø—Ä–æ—â–∞–π, –ø–æ–∫–∞  \n–û—Ç–≤–µ—Ç: –ø—Ä–æ—â–∞–π\n\n"
        "–í–æ–ø—Ä–æ—Å: –ø–æ–∫–∞  \n–û—Ç–≤–µ—Ç: –ø—Ä–æ—â–∞–π\n\n"
        "–í–æ–ø—Ä–æ—Å: –ø—Ä–æ—â–∞–π  \n–û—Ç–≤–µ—Ç: –ø—Ä–æ—â–∞–π\n\n"
        "–í–æ–ø—Ä–æ—Å: —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–º–æ—â—å  \n–û—Ç–≤–µ—Ç: –ø—Ä–æ—â–∞–π\n\n"
        "–í–æ–ø—Ä–æ—Å: –°–ø–∞—Å–∏–±–æ  \n–û—Ç–≤–µ—Ç: –ø—Ä–æ—â–∞–π\n\n"
        "–í–æ–ø—Ä–æ—Å: –∑–∞–∫–æ–Ω—á–∏–ª–∏  \n–û—Ç–≤–µ—Ç: –ø—Ä–æ—â–∞–π\n\n"
        "–í–æ–ø—Ä–æ—Å: –¥–æ —Å–≤–∏–¥–∞–Ω–∏—è  \n–û—Ç–≤–µ—Ç: –ø—Ä–æ—â–∞–π\n\n"
        "–í–æ–ø—Ä–æ—Å: –ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è?   \n–û—Ç–≤–µ—Ç: —Å–≤—è–∑—å\n\n"
        "–í–æ–ø—Ä–æ—Å: –•–æ—á—É –ø–æ–∑–≤–æ–Ω–∏—Ç—å   \n–û—Ç–≤–µ—Ç: —Å–≤—è–∑—å\n\n"
        "–í–æ–ø—Ä–æ—Å: –î–∞–π —Ç–µ–ª–µ—Ñ–æ–Ω   \n–û—Ç–≤–µ—Ç: —Å–≤—è–∑—å\n\n"
        "–í–æ–ø—Ä–æ—Å: –¥–∞–π –ø–æ—á—Ç—É   \n–û—Ç–≤–µ—Ç: —Å–≤—è–∑—å\n\n"
        "–í–æ–ø—Ä–æ—Å: —Ç–µ–ª–µ—Ñ–æ–Ω   \n–û—Ç–≤–µ—Ç: —Å–≤—è–∑—å\n\n"
        "–í–æ–ø—Ä–æ—Å: –°–≤—è–∑—å  \n–û—Ç–≤–µ—Ç: —Å–≤—è–∑—å\n\n"
        "–í–æ–ø—Ä–æ—Å: –ö–∞–∫–∏–µ —É—Å–ª—É–≥–∏ –≤—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç–µ?   \n–û—Ç–≤–µ—Ç: —É—Å–ª—É–≥–∏\n\n"
        "–í–æ–ø—Ä–æ—Å: –°–∫–æ–ª—å–∫–æ —Å—Ç–æ—è—Ç –≤–∞—à–∏ —É—Å–ª—É–≥–∏?   \n–û—Ç–≤–µ—Ç: —Å—Ç–æ–∏–º–æ—Å—Ç—å\n\n"
        "–í–æ–ø—Ä–æ—Å: –ö–∞–∫ –æ–ø–ª–∞—Ç–∏—Ç—å —É—Å–ª—É–≥–∏?   \n–û—Ç–≤–µ—Ç: –æ–ø–ª–∞—Ç–∞\n"
        "–í–æ–ø—Ä–æ—Å: –ü—Ä–∏–≤–µ—Ç   \n–û—Ç–≤–µ—Ç: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "–í–æ–ø—Ä–æ—Å: –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ   \n–û—Ç–≤–µ—Ç: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "–í–æ–ø—Ä–æ—Å: –°–∫–æ–ª—å–∫–æ —Å—Ç–æ—è—Ç —É—Å–ª—É–≥–∏?  \n–û—Ç–≤–µ—Ç: —Å—Ç–æ–∏–º–æ—Å—Ç—å\n"
        "–í–æ–ø—Ä–æ—Å: –°—Ç–æ–∏–º–æ—Å—Ç—å   \n–û—Ç–≤–µ—Ç: —Å—Ç–æ–∏–º–æ—Å—Ç—å\n"
        "–í–æ–ø—Ä–æ—Å: —Å–∫–æ–ª—å–∫–æ –¥–µ–Ω–µ–≥ –Ω—É–∂–Ω–æ?   \n–û—Ç–≤–µ—Ç: —Å—Ç–æ–∏–º–æ—Å—Ç—å\n"
        "–í–æ–ø—Ä–æ—Å: –ø—Ä–∞–π—Å –ª–∏—Å—Ç  \n–û—Ç–≤–µ—Ç: —Å—Ç–æ–∏–º–æ—Å—Ç—å\n"
        "–í–æ–ø—Ä–æ—Å: –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã  \n–û—Ç–≤–µ—Ç: –≥—Ä–∞—Ñ–∏–∫\n"
        f"{text_user}\n"
    )

    try:
        response = openai.Completion.create(
            model="text-davinci-003",
            prompt=query,
            temperature=0,
            max_tokens=100,
            top_p=1,
            frequency_penalty=0,
            presence_penalty=0,
        )
    except:
        result = "–ü—Ä–æ—Å—Ç–∏ –ø–æ—Ö–æ–∂–µ –º–æ–∏ —Å–µ—Ä–≤–µ—Ä–∞ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è!"

    res = response["choices"][0]["text"].lower()
    # await context.bot.send_message(chat_id=update.effective_chat.id, text=res)
    result = ""
    check = 0
    if "," not in res:
        try:
            for dat in data_send:
                if dat in res:
                    rand = random.choice(data_send[dat])
                    result = result + rand + "\n\n"
            if result == "":
                check = 1
        except:
            check = 1
        if res == "–æ—Ç–≤–µ—Ç: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
            keyboard = [
                [
                    InlineKeyboardButton("–ö—É–ø–∏—Ç—å/—Å–Ω—è—Ç—å", callback_data="0"),
                    InlineKeyboardButton("–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç", callback_data="1"),
                ],
                [
                    InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫", callback_data="2"),
                    InlineKeyboardButton("–û–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="3"),
                ],
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await context.bot.send_message(
                chat_id=update.effective_chat.id, text=result, reply_markup=reply_markup
            )
            return END_ROUTES

        elif res == "–æ—Ç–≤–µ—Ç: –∞–¥—Ä–µ—Å":
            await context.bot.send_message(
                chat_id=update.effective_chat.id, text=result
            )
            await context.bot.send_location(
                chat_id=update.effective_chat.id,
                latitude=55.776861,
                longitude=37.759475,
            )
            return END_ROUTES

        elif res == "–æ—Ç–≤–µ—Ç: –æ–ø–ª–∞—Ç–∞":
            keyboard = [[InlineKeyboardButton("–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É", callback_data="0")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await context.bot.send_message(
                chat_id=update.effective_chat.id, text=result, reply_markup=reply_markup
            )
            return END_ROUTES

        elif check == 1:
            rand = random.choice(data_send["–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"])
            result = rand + "\n\n"
            keyboard = [
                [
                    InlineKeyboardButton("–î–∞", callback_data=str(ONE)),
                    InlineKeyboardButton("–ù–µ—Ç", callback_data=str(TWO)),
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(text=result, reply_markup=reply_markup)
            # await context.bot.send_message(chat_id=update.effective_chat.id, text=result, reply_markup=reply_markup)
            return START_ROUTES

        else:
            await context.bot.send_message(
                chat_id=update.effective_chat.id, text=result, parse_mode="Markdown"
            )
            return END_ROUTES
    else:
        try:
            check_info = 0
            check_adress = 0
            check_pay = 0
            for dat in data_send:
                if dat in res:
                    result = ""
                    rand = random.choice(data_send[dat])
                    result = result + rand + "\n\n"
                    if "–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" in res and check_info == 0:
                        keyboard = [
                            [
                                InlineKeyboardButton("–ö—É–ø–∏—Ç—å/—Å–Ω—è—Ç—å", callback_data="0"),
                                InlineKeyboardButton(
                                    "–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç", callback_data="1"
                                ),
                            ],
                            [
                                InlineKeyboardButton(
                                    "–ó–∞–∫–∞–∑–∞—Ç—å –∑–≤–æ–Ω–æ–∫", callback_data="2"
                                ),
                                InlineKeyboardButton(
                                    "–û–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="3"
                                ),
                            ],
                        ]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        check_info = 1
                        await context.bot.send_message(
                            chat_id=update.effective_chat.id,
                            text=result,
                            reply_markup=reply_markup,
                        )
                        continue

                    if "–∞–¥—Ä–µ—Å" in res and check_adress == 0:
                        check_adress = 1
                        await context.bot.send_message(
                            chat_id=update.effective_chat.id, text=result
                        )
                        await context.bot.send_location(
                            chat_id=update.effective_chat.id,
                            latitude=55.776861,
                            longitude=37.759475,
                        )
                        continue

                    if "–æ–ø–ª–∞—Ç–∞" in res and check_pay == 0:
                        keyboard = [
                            [
                                InlineKeyboardButton(
                                    "–°—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É", callback_data="0"
                                )
                            ]
                        ]
                        reply_markup = InlineKeyboardMarkup(keyboard)
                        check_pay = 1
                        await context.bot.send_message(
                            chat_id=update.effective_chat.id,
                            text=result,
                            reply_markup=reply_markup,
                        )
                        continue

                    await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text=result,
                        parse_mode="Markdown",
                    )

            if result == "":
                check = 1
        except:
            check = 1
        if check == 1:
            rand = random.choice(data_send["–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"])
            result = rand + "\n\n"
            keyboard = [
                [
                    InlineKeyboardButton("–î–∞", callback_data=str(ONE)),
                    InlineKeyboardButton("–ù–µ—Ç", callback_data=str(TWO)),
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(text=result, reply_markup=reply_markup)
            # await context.bot.send_message(chat_id=update.effective_chat.id, text=result, reply_markup=reply_markup)
            return START_ROUTES


async def voice_msg(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text_voice = "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ–º–æ–≥—É –ø—Ä–æ—Å–ª—É—à–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ, –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ç–µ–∫—Å—Ç–æ–º!"
    await context.bot.send_message(chat_id=update.effective_chat.id, text=text_voice)


async def unknown_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text_command = (
        "–í—ã —Ö–æ—Ç–µ–ª–∏ —á—Ç–æ —Ç–æ —Å–ø—Ä–æ—Å–∏—Ç—å?\n"
        "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å —Ç–æ—á–Ω–µ–µ –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å."
    )
    await context.bot.send_message(chat_id=update.effective_chat.id, text=text_command)


async def helper(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.callback_query.message.text

    query = update.callback_query
    await query.answer()
    await query.edit_message_text(text=msg)
    rand = random.choice(data_send["–æ–ø–µ—Ä–∞—Ç–æ—Ä"])
    await context.bot.send_message(chat_id=update.effective_chat.id, text=rand)


async def not_helper(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.callback_query.message.text

    query = update.callback_query
    await query.answer()
    await query.edit_message_text(text=msg)
    text_command = "–•–æ—Ä–æ—à–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä—É–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å\n"
    await context.bot.send_message(chat_id=update.effective_chat.id, text=text_command)


def main() -> None:
    """–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞."""
    # –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–¥–∞–π—Ç–µ –µ–º—É —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞.
    application = Application.builder().token(token_bot_tg).build()

    echo_handler = MessageHandler(filters.TEXT & (~filters.COMMAND), echo)
    unknown_handler = MessageHandler(filters.COMMAND, unknown_command)
    voice_msg_handler = MessageHandler(filters.VOICE, voice_msg)
    # start_handler = CommandHandler('start', start)

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            START_ROUTES: [
                CallbackQueryHandler(helper, pattern="^" + str(ONE) + "$"),
                CallbackQueryHandler(not_helper, pattern="^" + str(TWO) + "$"),
            ],
            END_ROUTES: [
                CallbackQueryHandler(unknown_command, pattern="^" + str(ONE) + "$"),
            ],
        },
        fallbacks=[CommandHandler("start", start)],
    )

    application.add_handler(conv_handler)

    # application.add_handler(start_handler)
    application.add_handler(echo_handler)
    application.add_handler(unknown_handler)
    application.add_handler(voice_msg_handler)

    application.run_polling()


if __name__ == "__main__":
    # –û–±—ä—è–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö.
    load_dotenv()

    START_ROUTES, END_ROUTES, TYPE_REPLY = range(3)
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
    ONE, TWO = range(2)

    openai.api_key = os.environ.get("openai_apikey")
    token_bot_tg = os.environ.get("token_bot_tg")

    main()
